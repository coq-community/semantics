---
fullname: Semantics
shortname: semantics
namespace: Semantics
organization: coq-community
community: true
action: true

synopsis: >-
  A survey of semantics styles, from natural semantics through
  structural operational, axiomatic, and denotational semantics, to
  abstract interpretation.

description: |
  This is a survey of programming language semantics styles
  for a miniature example of a programming language, with their encoding
  in Coq, the proofs of equivalence of different styles, and the proof
  of soundess of tools obtained from axiomatic semantics or abstract
  interpretation.  The tools can be run inside Coq, thus making them
  available for proof by reflection, and the code can also be extracted
  and connected to a yacc-based parser, thanks to the use of a functor
  parameterized by a module type of strings.  A hand-written parser is
  also provided in Coq, but there are no proofs associated.

doi: 10.1017/CBO9780511770524.016

publications:
- pub_doi: 10.1017/CBO9780511770524.016
  pub_url: https://hal.inria.fr/inria-00160309
  pub_title: Theorem proving support in programming language semantics

authors:
- name: Yves Bertot
  initial: true

maintainers:
- name: Kartik Singhal
  nickname: k4rtik

opam-file-maintainer: kartiksinghal@gmail.com

license:
  fullname: MIT License
  identifier: MIT

supported_coq_versions:
  text: 8.10 or later

tested_coq_opam_versions:
- version: '8.10'
- version: '8.11'
- version: 'dev'

keywords:
- name: natural semantics
- name: denotational semantics
- name: axiomatic semantics
- name: Hoare logic
- name: Dijkstra weakest pre-condition calculus
- name: abstract interpretation
- name: intervals

categories:
- name: Computer Science/Semantics
- name: Compilation/Semantics

documentation: |
  ## Description
  These files describe several approaches to the description of a simple
  programming language using the Coq system.

  `syntax.v` the constructs of the language

  `little.v` operational semantics in three forms: natural semantics (also know
    as big-step semantics), structural operational semantics (small-step
    semantics), and a functional implementation of the latter.  This file
    also contains the proof that the three point descriptions are equivalent.

  `function_cpo.v`  A description of partial functions and Tarski's fixpoint theorem.

  `constructs.v`  A proof that the constructs of the programming language are
    continuous, with respect to the notion of continuity given in function_cpo

  `denot.v` A description of the programming language in the style of denotational
    semantics.  This file also contains the proof that denotational semantics
    and natural semantics are equivalent.

  `axiom.v` Hoare triples and Dijkstra's weakest pre-condition calculs, in the form
    of a verification condition generator.  This   file also contains a proof that
    the axiomatic semantics (base on Hoare triples) and the vcg are sound with
    respect to the natural semantics.

  `intervals.v` A notion of intervals to be used in an abstract interpreter.
    A type of extended integers is defined to incorporate infinities (minfty
    and pinfty) and intervals are defined as pairs of extended integers
    (this accepts the meaningless intervals of the form (minfty, minfty), but
    they do not cause any problem).  Different forms additions and comparisons
    are defined for extended integers and intervals.

  `abstract_i.v`  An abstract interpreter defined as a parameterized module over
    a notion of abstract domain.  This abstract interpreter is instantiated
    with the intervals defined above.

  `little_w_string.v`  The whole development is defined as a set of modules
    parameterized by a notion of strings.  This file instantiate the development
    on the string package provided in Coq.

  `parser.v` A parser for the language and assertions, which can be hooked on all
    the tools.  This is nice for the examples.  There are no proofs on this
    parser, and when parsing fails, it simply returns the "skip" program.

  `example.v`, `example2.v`, `ex_i.v`  These are examples where the abstract interpreter,
    and the vcg are used in a reflective manner directly inside Coq.

  `extract_interpret.v`  This file contains the directives to extract code from
    the proved tools.

  This development also comes with ml files used to encapsulate the extracted
  code.

  `str_little.ml`  A definition of the module of strings as needed for the
    extracted code, but this module is based on ocaml native strings.

  `parse_little.mly` A parser description using the yacc extension of ocaml
  llex.mll the lexical analyser to be used with the parser.

  `little.ml` basic encapsulation: a single command is generated, with four
    options:
    - `-interpreter` (just to execute a program)
    - `-vcg` (to generate the conditions for the verification of an annotated program)
    - `-vcg-coq` (to generatedthe conditions in coq syntax)
    - `-static-analysis` (to run the abstract interpreter).
---
